"""TDD —Ç–µ—Å—Ç—ã –¥–ª—è RoleManager"""

import pytest

from src.role_manager import RoleManager


class TestRoleManager:
    """TDD —Ç–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ä–æ–ª–µ–π"""

    def test_load_prompt_from_file(self, tmp_path):
        """üî¥ RED: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞"""
        # Arrange
        prompt_file = tmp_path / "test_prompt.txt"
        prompt_file.write_text("Test system prompt", encoding="utf-8")

        # Act
        manager = RoleManager(prompt_file)

        # Assert
        assert manager.get_system_prompt() == "Test system prompt"

    def test_load_prompt_file_not_found(self):
        """üî¥ RED: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–∞"""
        # Act & Assert
        with pytest.raises(FileNotFoundError):
            RoleManager("nonexistent_file.txt")

    def test_load_prompt_empty_file(self, tmp_path):
        """üî¥ RED: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Ñ–∞–π–ª–µ"""
        # Arrange
        prompt_file = tmp_path / "empty.txt"
        prompt_file.write_text("   \n  \n", encoding="utf-8")

        # Act & Assert
        with pytest.raises(ValueError, match="empty"):
            RoleManager(prompt_file)

    def test_get_role_description(self, tmp_path):
        """üî¥ RED: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–ª–∏"""
        # Arrange
        prompt_text = """–¢—ã - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥.

–¢–≤–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è:
- –ó–¥–æ—Ä–æ–≤–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
- –î–∏–µ—Ç—ã

–¢–≤–æ–π —Å—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π
"""
        prompt_file = tmp_path / "nutritionist.txt"
        prompt_file.write_text(prompt_text, encoding="utf-8")
        manager = RoleManager(prompt_file)

        # Act
        description = manager.get_role_description()

        # Assert
        assert "–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ù—É—Ç—Ä–∏—Ü–∏–æ–ª–æ–≥" in description
        assert len(description) > 0

    def test_reload_prompt(self, tmp_path):
        """üî¥ RED: –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–ø—Ç–∞"""
        # Arrange
        prompt_file = tmp_path / "reload_test.txt"
        prompt_file.write_text("Original prompt", encoding="utf-8")
        manager = RoleManager(prompt_file)

        assert manager.get_system_prompt() == "Original prompt"

        # Act - –∏–∑–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
        prompt_file.write_text("Updated prompt", encoding="utf-8")
        manager.reload_prompt()

        # Assert
        assert manager.get_system_prompt() == "Updated prompt"

    def test_load_prompt_with_path_object(self, tmp_path):
        """üî¥ RED: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Path –æ–±—ä–µ–∫—Ç–æ–≤"""
        # Arrange
        prompt_file = tmp_path / "path_test.txt"
        prompt_file.write_text("Path object prompt", encoding="utf-8")

        # Act
        manager = RoleManager(prompt_file)

        # Assert
        assert manager.get_system_prompt() == "Path object prompt"

    def test_role_description_multiple_lines(self, tmp_path):
        """üî¥ RED: –û–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–ª–∏ –∏–∑ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞"""
        # Arrange
        prompt_text = """Line 1: Important info

Line 2: More info

Line 3: Additional

Line 4: Extra

Line 5: Even more

Line 6: Should not be included
"""
        prompt_file = tmp_path / "multiline.txt"
        prompt_file.write_text(prompt_text, encoding="utf-8")
        manager = RoleManager(prompt_file)

        # Act
        description = manager.get_role_description()

        # Assert
        assert "Line 1" in description
        assert "Line 5" in description
        # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª–µ–µ 5 —Å—Ç—Ä–æ–∫
        assert description.count("\n") <= 4
