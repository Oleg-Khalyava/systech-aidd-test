---
alwaysApply: false
---
# TDD Workflow

> **Test-Driven Development** - —Å–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç—ã, –ø–æ—Ç–æ–º –∫–æ–¥

## –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞

### 1. –†–∞–±–æ—Ç–∞ –ø–æ –ø–ª–∞–Ω—É
- –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞—á–∏ **—Å—Ç—Ä–æ–≥–æ** –ø–æ `tasklist.md`
- –°–ª–µ–¥–æ–≤–∞—Ç—å –∏—Ç–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º—É –ø–æ–¥—Ö–æ–¥—É (–ò—Ç–µ—Ä–∞—Ü–∏—è 1 ‚Üí 2 ‚Üí 3 ‚Üí 4)
- –ù–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π
- **–ö–∞–∂–¥–∞—è —Ñ–∏—á–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–µ—Å—Ç–∞!**

### 2. TDD —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏

#### –≠—Ç–∞–ø 1: –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ
- –ò–∑—É—á–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ tasklist
- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞–º–∏ –∫–æ–¥–∞
- –û–ø–∏—Å–∞—Ç—å –∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã/–∏–∑–º–µ–Ω–µ–Ω—ã
- **–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏** –¥–ª—è —Ñ–∏—á–∏
- **–û–∂–∏–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è** –æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

#### –≠—Ç–∞–ø 2: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è (TDD —Ü–∏–∫–ª)

##### üî¥ RED - –ü–∏—à–∏ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∞–¥–∞–µ—Ç
1. **–°–æ–∑–¥–∞–π —Ç–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∏—á–∏**
   ```python
   # tests/test_new_feature.py
   def test_new_feature_success():
       """–¢–µ—Å—Ç –Ω–æ–≤–æ–π —Ñ–∏—á–∏"""
       # Arrange
       component = Component()

       # Act
       result = component.new_feature(input_data)

       # Assert
       assert result == expected_value
   ```

2. **–ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç - —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø–∞–¥–∞–µ—Ç**
   ```bash
   make test  # –∏–ª–∏ pytest tests/test_new_feature.py -v
   ```

3. **–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ —Ç–µ—Å—Ç –ø–∞–¥–∞–µ—Ç –ø–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω–µ**
   - ‚ùå `AttributeError: 'Component' has no attribute 'new_feature'`
   - ‚úÖ –¢–µ—Å—Ç –ø–∞–¥–∞–µ—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ñ–∏—á–∞ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞

##### üü¢ GREEN - –ù–∞–ø–∏—à–∏ –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
1. **–†–µ–∞–ª–∏–∑—É–π –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ**
   ```python
   # src/component.py
   class Component:
       def new_feature(self, input_data):
           # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
           return expected_value
   ```

2. **–ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç - —É–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç**
   ```bash
   make test  # –∏–ª–∏ pytest tests/test_new_feature.py -v
   ```

3. **–í—Å–µ —Ç–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–µ–ª–µ–Ω—ã–º–∏!**
   - ‚úÖ –ù–æ–≤—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç
   - ‚úÖ –í—Å–µ —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç—ã —Ç–æ–∂–µ –ø—Ä–æ—Ö–æ–¥—è—Ç

##### üîµ REFACTOR - –£–ª—É—á—à–∏ –∫–æ–¥
1. **–£–ª—É—á—à–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é** (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
   - –£–±–µ—Ä–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (DRY)
   - –£–ø—Ä–æ—Å—Ç–∏ –∫–æ–¥ (KISS)
   - –£–ª—É—á—à–∏ —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
   - –°–ª–µ–¥—É–π –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∏–∑ `vision.md`

2. **–ó–∞–ø—É—Å—Ç–∏ —Ç–µ—Å—Ç—ã –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è**
   ```bash
   make test
   ```

3. **–¢–µ—Å—Ç—ã –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –∑–µ–ª–µ–Ω—ã–º–∏!**
   - ‚úÖ –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –ª–æ–º–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª

##### üîÅ REPEAT - –°–ª–µ–¥—É—é—â–∏–π —Ç–µ—Å—Ç
- –í–µ—Ä–Ω–∏—Å—å –∫ —à–∞–≥—É üî¥ RED –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ —Ñ–∏—á–∏
- –ü—Ä–æ–¥–æ–ª–∂–∞–π –ø–æ–∫–∞ —Ñ–∏—á–∞ –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞

##### ‚úÖ VERIFY - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
```bash
make format      # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
make lint        # –õ–∏–Ω—Ç–µ—Ä
make type-check  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤
make test-cov    # Coverage –ø—Ä–æ–≤–µ—Ä–∫–∞
```

#### –≠—Ç–∞–ø 3: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
- –ü–æ—Å–ª–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ **–æ–∂–∏–¥–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è** —Ä–∞–±–æ—Ç—ã
- –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ –∏ coverage
- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
- **–í—Å–µ —Ç–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ!**

#### –≠—Ç–∞–ø 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
- –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ `tasklist.md`:
  - ‚è≥ –ù–µ –Ω–∞—á–∞—Ç–æ ‚Üí üîÑ –í —Ä–∞–±–æ—Ç–µ ‚Üí ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ
- –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø—É–Ω–∫—Ç—ã —á–µ–∫–±–æ–∫—Å–∞–º–∏ `[x]`
- –û–±–Ω–æ–≤–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –¥–∞—Ç–∞–º–∏

---

## TDD –ß–µ–∫–ª–∏—Å—Ç –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏

### –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
- [ ] –ü—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–¥–∞—á—É –∏–∑ tasklist
- [ ] –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ–¥–æ–º
- [ ] –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
- [ ] –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ

### TDD —Ü–∏–∫–ª
- [ ] üî¥ **RED**: –ù–∞–ø–∏—Å–∞—Ç—å –ø–∞–¥–∞—é—â–∏–π —Ç–µ—Å—Ç
- [ ] üî¥ **RED**: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç, —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø–∞–¥–∞–µ—Ç
- [ ] üü¢ **GREEN**: –ù–∞–ø–∏—Å–∞—Ç—å –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è
- [ ] üü¢ **GREEN**: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç, —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç
- [ ] üîµ **REFACTOR**: –£–ª—É—á—à–∏—Ç—å –∫–æ–¥ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
- [ ] üîµ **REFACTOR**: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã, —É–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ –∑–µ–ª–µ–Ω—ã–µ
- [ ] üîÅ **REPEAT**: –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π —á–∞—Å—Ç–∏ —Ñ–∏—á–∏
- [ ] ‚úÖ **VERIFY**: –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞

### –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
- [ ] –ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å coverage (‚â•80%)
- [ ] –û–±–Ω–æ–≤–∏—Ç—å tasklist (—Å—Ç–∞—Ç—É—Å—ã, —á–µ–∫–±–æ–∫—Å—ã, –¥–∞—Ç—ã)
- [ ] –°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–¥–∞—á–µ

---

## –ö–æ–º–∞–Ω–¥—ã –¥–ª—è TDD

### –ë—ã—Å—Ç—Ä—ã–π —Ü–∏–∫–ª —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
```bash
# –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ (–±—ã—Å—Ç—Ä–æ)
pytest tests/test_new_feature.py -v

# –ó–∞–ø—É—Å–∫ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
pytest tests/test_new_feature.py -v --watch  # —Ç—Ä–µ–±—É–µ—Ç pytest-watch

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
pytest tests/test_new_feature.py -x

# –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏—Ö—Å—è —Ç–µ—Å—Ç–æ–≤
pytest tests/ --lf
```

### –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
```bash
# –í—Å–µ —Ç–µ—Å—Ç—ã
make test

# –¢–µ—Å—Ç—ã —Å coverage
make test-cov

# –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
make check  # format + lint + type-check + test
```

### –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ coverage
```bash
# –û—Ç—á–µ—Ç –≤ –∫–æ–Ω—Å–æ–ª–∏
coverage report

# HTML –æ—Ç—á–µ—Ç
coverage html && start htmlcov/index.html  # Windows
coverage html && open htmlcov/index.html   # MacOS/Linux
```

---

## –ü—Ä–∏–º–µ—Ä—ã TDD —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤

### –ù–æ–≤–∞—è —Ñ–∏—á–∞: Rate Limiting

#### üî¥ RED - –¢–µ—Å—Ç 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω
```python
# tests/test_rate_limit.py
def test_first_request_allowed():
    """TDD RED: –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω"""
    middleware = RateLimitMiddleware(rate_limit=2)

    result = middleware.check(user_id=123)

    assert result is True
```

```bash
$ make test
# ‚ùå FAILED: AttributeError: 'RateLimitMiddleware' has no attribute 'check'
```

#### üü¢ GREEN - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
```python
# src/middlewares/rate_limit.py
class RateLimitMiddleware:
    def __init__(self, rate_limit: int):
        self.rate_limit = rate_limit

    def check(self, user_id: int) -> bool:
        return True  # –ú–∏–Ω–∏–º—É–º –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
```

```bash
$ make test
# ‚úÖ PASSED: test_first_request_allowed
```

#### üî¥ RED - –¢–µ—Å—Ç 2: –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è
```python
def test_fast_requests_blocked():
    """TDD RED: –±—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–æ–ª–∂–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å—Å—è"""
    middleware = RateLimitMiddleware(rate_limit=2)

    middleware.check(123)  # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    result = middleware.check(123)  # –í—Ç–æ—Ä–æ–π —Å—Ä–∞–∑—É

    assert result is False
```

```bash
$ make test
# ‚ùå FAILED: assert True is False (check –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True)
```

#### üü¢ GREEN - –ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
```python
from time import time

class RateLimitMiddleware:
    def __init__(self, rate_limit: int):
        self.rate_limit = rate_limit
        self.last_request: dict[int, float] = {}

    def check(self, user_id: int) -> bool:
        now = time()
        last = self.last_request.get(user_id, 0)

        if now - last < self.rate_limit:
            return False

        self.last_request[user_id] = now
        return True
```

```bash
$ make test
# ‚úÖ PASSED: test_first_request_allowed
# ‚úÖ PASSED: test_fast_requests_blocked
```

#### üîµ REFACTOR - –£–ª—É—á—à–µ–Ω–∏–µ
```python
# –î–æ–±–∞–≤–ª—è–µ–º type hints, docstrings, –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
from time import time
from typing import Dict

class RateLimitMiddleware:
    """Middleware –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —á–∞—Å—Ç–æ—Ç—ã –∑–∞–ø—Ä–æ—Å–æ–≤"""

    def __init__(self, rate_limit: int = 2):
        """
        Args:
            rate_limit: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        """
        self._rate_limit = rate_limit
        self._last_request: Dict[int, float] = {}

    def check(self, user_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Returns:
            True –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω, False –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å
        """
        now = time()
        last = self._last_request.get(user_id, 0)

        if now - last < self._rate_limit:
            return False

        self._last_request[user_id] = now
        return True
```

```bash
$ make test
# ‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ

$ make check
# ‚úÖ format: OK
# ‚úÖ lint: OK
# ‚úÖ type-check: OK
# ‚úÖ test: OK
```

---

## –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏

- **–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å** –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
- –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–∞
- **–í—Å–µ —Ç–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ!**
- Coverage ‚â• 80% (–ø—Ä–æ–≤–µ—Ä–∏—Ç—å `make test-cov`)
- –ö–æ–¥ –ø—Ä–æ—à–µ–ª –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (`make check`)

---

## –ö–æ–º–º–∏—Ç—ã

### –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ñ–∏—á–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
```bash
git add .
git commit -m "test: add rate limiting tests"
git commit -m "feat: implement rate limiting"
```

### –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
```bash
git add .
git commit -m "feat: iteration N - –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ + tests"
```

**–§–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:**
- `feat: iteration N - description + tests (coverage: XX%)`
- –ü—Ä–∏–º–µ—Ä: `feat: iteration 1 - infrastructure and basic bot + tests (coverage: 85%)`

---

## –ó–æ–ª–æ—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞ TDD

### ‚úÖ –î–µ–ª–∞–π
1. **–ü–∏—à–∏ —Ç–µ—Å—Ç –ø–µ—Ä–≤—ã–º** - –≤—Å–µ–≥–¥–∞!
2. **–ü–∏—à–∏ –º–∏–Ω–∏–º—É–º –∫–æ–¥–∞** –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
3. **–†–µ—Ñ–∞–∫—Ç–æ—Ä–∏ —Å–º–µ–ª–æ** - —Ç–µ—Å—Ç—ã –∑–∞—â–∏—â–∞—é—Ç –æ—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
4. **–ó–∞–ø—É—Å–∫–∞–π —Ç–µ—Å—Ç—ã —á–∞—Å—Ç–æ** - –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
5. **–û–¥–∏–Ω —Ç–µ—Å—Ç = –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞** - –ø—Ä–æ—Å—Ç–æ—Ç–∞ –∏ —è—Å–Ω–æ—Å—Ç—å
6. **Commit —á–∞—Å—Ç–æ** - –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏

### ‚ùå –ù–µ –¥–µ–ª–∞–π
1. **–ù–µ –ø–∏—à–∏ –∫–æ–¥ –±–µ–∑ —Ç–µ—Å—Ç–∞** - —ç—Ç–æ –Ω–µ TDD!
2. **–ù–µ –ø—Ä–æ–ø—É—Å–∫–∞–π RED —Ñ–∞–∑—É** - —É–±–µ–¥–∏—Å—å —á—Ç–æ —Ç–µ—Å—Ç –ø–∞–¥–∞–µ—Ç
3. **–ù–µ –ø–∏—à–∏ —Å—Ä–∞–∑—É "–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π" –∫–æ–¥** - –º–∏–Ω–∏–º—É–º —Å–Ω–∞—á–∞–ª–∞
4. **–ù–µ –æ—Å—Ç–∞–≤–ª—è–π –ø–∞–¥–∞—é—â–∏–µ —Ç–µ—Å—Ç—ã** - —Ñ–∏–∫—Å–∏ —Å—Ä–∞–∑—É
5. **–ù–µ —Ç–µ—Å—Ç–∏—Ä—É–π boilerplate** - —Ñ–æ–∫—É—Å –Ω–∞ –ª–æ–≥–∏–∫–µ
6. **–ù–µ –≥–æ–Ω–∏—Å—å –∑–∞ 100% coverage** - –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ

---

## –ú–∞–Ω—Ç—Ä–∞ TDD

> **RED ‚Üí GREEN ‚Üí REFACTOR ‚Üí REPEAT**
>
> 1. üî¥ –ü–∏—à–∏ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∞–¥–∞–µ—Ç
> 2. üü¢ –ü–∏—à–∏ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Ö–æ–¥–∏—Ç
> 3. üîµ –£–ª—É—á—à–∏ –∫–æ–¥
> 4. üîÅ –ü–æ–≤—Ç–æ—Ä—è–π

**–ü–æ–º–Ω–∏:** –ï—Å–ª–∏ —Ç–µ—Å—Ç –Ω–µ –ø–∞–¥–∞–ª - —Ç—ã –Ω–µ –∑–Ω–∞–µ—à—å, —á—Ç–æ –æ–Ω –ø—Ä–æ–≤–µ—Ä—è–µ—Ç!

---

## –†–µ—Ñ–µ—Ä–µ–Ω—Å

- Roadmap –ø—Ä–æ–µ–∫—Ç–∞: [roadmap.md](../../docs/roadmap.md)
- QA —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: [qa_conventions.mdc](./qa_conventions.mdc)
- –û–±—â–∏–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: [conventions.mdc](./conventions.mdc)
- –ë–∞–∑–æ–≤—ã–π workflow: [workflow.mdc](./workflow.mdc)
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: [vision.md](../../docs/vision.md)
