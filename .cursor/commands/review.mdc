# Code Review Agent Prompt

## Задача
Провести комплексное ревью проекта на соответствие всем соглашениям разработки, архитектурным принципам и стандартам качества кода.

## Этап 1: Изучение соглашений и проекта

### 1.1 Изучи файлы соглашений
- Прочитай `docs/vision.md` - техническое видение и архитектура проекта
- Изучи `.cursor/rules/conventions.mdc` - соглашения по разработке
- Изучи `.cursor/rules/qa_conventions.mdc` - соглашения по тестированию
- Изучи `.cursor/rules/workflow.mdc` - процесс разработки
- Изучи `.cursor/rules/workflow_tdd.mdc` - TDD процесс

### 1.2 Изучи структуру проекта
- Проанализируй структуру директорий и файлов
- Изучи основные компоненты в `src/`
- Проверь тесты в `tests/`
- Изучи конфигурационные файлы (`pyproject.toml`, `Makefile`)

## Этап 2: Проведение ревью

### 2.1 Архитектурное ревью
- Соответствие принципам KISS и SOLID
- Правильность использования Protocol вместо ABC
- Корректность Dependency Injection
- Соблюдение принципа "1 класс = 1 файл"
- Структура middleware и handlers

### 2.2 Code Quality ревью
- Проверка type hints (mypy strict mode)
- Соответствие форматированию black (line-length=100)
- Прохождение линтера ruff
- Наличие docstrings для публичного API
- Соблюдение naming conventions

### 2.3 Security ревью
- Безопасная обработка ошибок (без утечки информации)
- Валидация входных данных
- Правильное логирование (без чувствительных данных)
- Rate limiting и защита от abuse

### 2.4 Testing ревью
- Покрытие тестами ≥80%
- Качество unit тестов (KISS, DRY принципы)
- Правильное использование fixtures и mocks
- Тестирование критичных flow и edge cases
- Соответствие TDD процессу

### 2.5 Performance ревью
- Использование LRU cache с TTL
- Управление памятью (отсутствие утечек)
- Эффективность алгоритмов
- Правильная работа с async/await

### 2.6 Production Readiness ревью
- Graceful shutdown
- Retry logic для внешних API
- Мониторинг и метрики
- Конфигурирование через .env
- Логирование критичных событий

## Этап 3: Написание отчета

### 3.1 Структура отчета
```
# Code Review Report - [дата]

## Executive Summary
- Общая оценка проекта (1-10)
- Количество найденных проблем
- Рекомендации по приоритетам

## Детальные находки

### Архитектура (оценка: X/10)
- ✅ Положительные аспекты
- ❌ Проблемы и рекомендации

### Code Quality (оценка: X/10)
- ✅ Положительные аспекты
- ❌ Проблемы и рекомендации

### Security (оценка: X/10)
- ✅ Положительные аспекты
- ❌ Проблемы и рекомендации

### Testing (оценка: X/10)
- ✅ Положительные аспекты
- ❌ Проблемы и рекомендации

### Performance (оценка: X/10)
- ✅ Положительные аспекты
- ❌ Проблемы и рекомендации

### Production Readiness (оценка: X/10)
- ✅ Положительные аспекты
- ❌ Проблемы и рекомендации

## Рекомендации по приоритетам
1. Критичные проблемы (исправить немедленно)
2. Важные улучшения (следующая итерация)
3. Nice-to-have (будущие итерации)

## Заключение
- Общая готовность к production
- Следующие шаги
```

### 3.2 Критерии оценки
- **9-10**: Отлично, соответствует всем стандартам
- **7-8**: Хорошо, есть минорные улучшения
- **5-6**: Удовлетворительно, требуются значительные улучшения
- **1-4**: Неудовлетворительно, критические проблемы

## Этап 4: Сохранение отчета

### 4.1 Покажи отчет в чат
- Выведи полный отчет в чат для ознакомления
- Укажи общую оценку и количество найденных проблем

### 4.2 Запроси подтверждение на сохранение
- Спроси у пользователя: "Сохранить отчет о ревью в файл?"
- При подтверждении сохрани в `docs/reviews/review_001.md`
- Нумеруй файлы последовательно (001, 002, 003...)
- Если директория `docs/reviews/` не существует - создай её

## Дополнительные инструкции

### Приоритеты ревью
1. **Security** - безопасность критична
2. **Architecture** - основа для масштабирования
3. **Code Quality** - читаемость и поддерживаемость
4. **Testing** - надежность кода
5. **Performance** - эффективность работы
6. **Production Readiness** - готовность к деплою

### Стиль отчета
- Конкретные примеры кода с указанием файлов и строк
- Четкие рекомендации по исправлению
- Приоритизация проблем (критично/важно/желательно)
- Конструктивный тон, фокус на улучшениях

### Ограничения
- Не предлагай кардинальные архитектурные изменения без обоснования
- Учитывай принцип KISS - простота важнее "правильности"
- Фокусируйся на практических улучшениях, а не на теоретических идеалах




