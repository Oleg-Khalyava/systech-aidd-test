"""–°–∏—Å—Ç–µ–º–∞ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±–æ—Ç–∞"""

import time
from dataclasses import dataclass, field
from datetime import datetime


@dataclass
class BotMetrics:
    """–ö–ª–∞—Å—Å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –±–æ—Ç–∞

    Attributes:
        total_requests: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        total_errors: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫
        total_tokens: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        total_cost: –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (—Ç–æ–∫–µ–Ω—ã * 0.00001)
        active_users: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        start_time: –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """

    total_requests: int = 0
    total_errors: int = 0
    total_tokens: int = 0
    total_cost: float = 0.0
    active_users: set[int] = field(default_factory=set)
    start_time: float = field(default_factory=time.time)

    def increment_requests(self) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤"""
        self.total_requests += 1

    def increment_errors(self) -> None:
        """–£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self.total_errors += 1

    def add_tokens(self, tokens: int, cost_per_token: float = 0.00001) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã

        Args:
            tokens: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            cost_per_token: –°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ —Ç–æ–∫–µ–Ω (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é $0.00001)
        """
        self.total_tokens += tokens
        self.total_cost += tokens * cost_per_token

    def add_active_user(self, user_id: int) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.active_users.add(user_id)

    def get_uptime(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

        Returns:
            float: –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        return time.time() - self.start_time

    def get_uptime_formatted(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã

        Returns:
            str: –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "X–¥ X—á X–º X—Å"
        """
        uptime = int(self.get_uptime())
        days = uptime // 86400
        hours = (uptime % 86400) // 3600
        minutes = (uptime % 3600) // 60
        seconds = uptime % 60

        parts = []
        if days > 0:
            parts.append(f"{days}–¥")
        if hours > 0:
            parts.append(f"{hours}—á")
        if minutes > 0:
            parts.append(f"{minutes}–º")
        parts.append(f"{seconds}—Å")

        return " ".join(parts)

    def get_error_rate(self) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫

        Returns:
            float: –ü—Ä–æ—Ü–µ–Ω—Ç –æ—à–∏–±–æ–∫ –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        if self.total_requests == 0:
            return 0.0
        return (self.total_errors / self.total_requests) * 100

    def get_stats(self) -> dict[str, object]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è

        Returns:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        return {
            "total_requests": self.total_requests,
            "total_errors": self.total_errors,
            "error_rate": f"{self.get_error_rate():.2f}%",
            "total_tokens": self.total_tokens,
            "total_cost": f"${self.total_cost:.4f}",
            "active_users": len(self.active_users),
            "uptime": self.get_uptime_formatted(),
            "start_time": datetime.fromtimestamp(self.start_time).strftime("%Y-%m-%d %H:%M:%S"),
        }

    def get_stats_formatted(self) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π

        Returns:
            str: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        stats = self.get_stats()
        lines = [
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**",
            "",
            f"üî¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}",
            f"‚ùå –û—à–∏–±–æ–∫: {stats['total_errors']} ({stats['error_rate']})",
            f"üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']}",
            f"ü™ô –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: {stats['total_tokens']}",
            f"üí∞ –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {stats['total_cost']}",
            f"‚è± –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['uptime']}",
            f"üöÄ –ó–∞–ø—É—â–µ–Ω: {stats['start_time']}",
        ]
        return "\n".join(lines)

    def reset(self) -> None:
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ (–∫—Ä–æ–º–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞)"""
        self.total_requests = 0
        self.total_errors = 0
        self.total_tokens = 0
        self.total_cost = 0.0
        self.active_users = set()


