"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –±–æ—Ç–∞"""

import logging

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from src.dependencies import BotDependencies
from src.validators import MessageValidator

router = Router()
logger = logging.getLogger("telegram_bot")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
message_validator = MessageValidator()


@router.message(Command("start"))
async def cmd_start(message: Message, deps: BotDependencies) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deps: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞
    """
    if not message.from_user:
        return

    logger.info(
        f"Received /start command from user {message.from_user.id} "
        f"(@{message.from_user.username}, {message.from_user.first_name})"
    )

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = deps.user_storage.get_or_create(
        chat_id=message.chat.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        default_role=deps.config.default_system_prompt,
    )

    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –¥–∏–∞–ª–æ–≥
    deps.conversation_storage.get_or_create(message.chat.id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! {deps.config.welcome_message}")


@router.message(Command("clear"))
async def cmd_clear(message: Message, deps: BotDependencies) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deps: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞
    """
    logger.info(f"Received /clear command from user {message.from_user.id if message.from_user else 'unknown'}")

    conversation = deps.conversation_storage.get(message.chat.id)

    if conversation:
        messages_count = len(conversation.messages)
        conversation.clear()
        logger.info(f"Cleared conversation history for chat {message.chat.id} ({messages_count} messages)")
        await message.answer("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞!")
    else:
        await message.answer("–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ —É–∂–µ –ø—É—Å—Ç–∞.")


@router.message()
async def message_handler(message: Message, deps: BotDependencies) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        deps: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞
    """
    if not message.from_user:
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    is_valid, error_message = message_validator.validate(message.text)
    if not is_valid:
        if error_message:
            await message.answer(error_message)
        return

    # –ü–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ message.text –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ str
    text = message.text
    if text is None:  # type guard
        return

    logger.info(
        f"Received message from user {message.from_user.id} "
        f"(@{message.from_user.username}): {text[:50]}{'...' if len(text) > 50 else ''}"
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∏–∞–ª–æ–≥
    user = deps.user_storage.get_or_create(
        chat_id=message.chat.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        default_role=deps.config.default_system_prompt,
    )
    conversation = deps.conversation_storage.get_or_create(message.chat.id)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    conversation.add_message("user", text)

    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è LLM
        context = conversation.get_context(
            max_messages=deps.config.max_context_messages,
            system_prompt=user.current_role,
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ LLM
        response = await deps.llm_client.send_message(context)

        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation.add_message("assistant", response)

        logger.info(
            f"Successfully processed message for user {message.from_user.id}, "
            f"response length: {len(response)} chars"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(response)

    except Exception as e:
        logger.error(
            f"Error processing message from user {message.from_user.id}: {e}",
            exc_info=True
        )
        # –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if conversation.messages and conversation.messages[-1]["role"] == "user":
            conversation.messages.pop()

